자바는 프로그래밍 언어이다. 
고급언어에 해당.
객체지향 언어.

프로그래밍 ->컴파일러 -> 기계어 실행

자바 가상 머신 JVM
OS별로 JVM이 존재한다. 
자바프로그램  순서 컴파일러 -> 바이트 코드 -> JVM -> OS

JDK > JRE > JVM
JDK = JRE + 개발 도구
- 자바 프로그램 개발하고 실행하기 위해 반드시 설치
JRE = JVM + 표준 클래스 라이브러리
- 자바 프로그램을 실행만 할 경우 설치

프로그램 작성과 실행
프로젝트 생성 -> 자바 프로그래밍 코딩(*.java) -> 바이트 코드 생성(*.class) -> 실행
javac.exe java.exe

주석
// //부터 라인 끝까지 주석으로 처리한다 (행 주석)
/* ~ */ /*와 */ 사이에 있는 모든 범위를 주석으로 처리한다. (범위 주석)

=================================================
자바 프로그램의 구조와 기본 입출력

표준 입출력
화면에 데이터 출력
- println() : ()내부의 내용을 출력한 후 행을 바꾼다.
- print(): ()내부의 내용을 출력만 하고 행은 바꾸지 않는다.
- printf(): 포맷을 지정해서 출력한다.

ex) printf() 형식
System.out.printf(“포맷 명시자”, 데이터, 데이터, …);

키보드로 데이터 입력
- 프로그램의 첫 행에 다음을 추가해 Scanner 클래스의 경로 이름을 컴파일러에 알린다.
import java.uril.Scanner;
- 키보드로 데이터를 입력받으려고 System.in객체와 연결된 Scanner 객체를 생성한다.
Scanner in = new Scanner(System.in);
- Scanner 클래스가 제공하는 다양한 메소드를 이용해 키보드로 데이터를 입력받는다.
inx x = in.nextInt(); // 정수를 읽어 변수 x에 대입한다.

.(온점) 접근연산자로 쓰인다.

변수
변수: 하나의 값을 저장할 수 있는 메모리 공간

첫번째 글자는 문자이거나 ‘$’, ‘_’ 여야 하고 숫자로 시작할 수 없다. (필수)
영어 대소문자가 구분된다. (필수)
첫문자는 영어 소문자로 시작하되, 다른 단어가 붙을경우 첫자를 대문자로 한다. (관례)
자바 예약어는 사용할 수 없다. (필수)
문자 수(길이)의 제한은 없다

변수 표기법
카멜(단봉낙타) 표기법
- 각 단어의 첫 문자를 대문자로 표기하되, 맨 처음 문자는 소문자로 표기
(띄워쓰기 대신 대문짜로 각 단어를 구별함)

파스칼 표기법
- 첫 단어를 대문자로 시작하는 표기법
- 클래스 등에서 사용하는 형태암.
- 기본 표기법에서는 사용하지 않음

====================================
Java는  C와 달리 char가 2byte이다.
Java +연산자는 문자열을 연결해준다.

타입 변환
- 자동 타입 변환: Promotion
- 강제 타입 변환: Casting

큰 크기 타입에다가 작은 크기 타입을 집어넣으면 큰 크기 타입으로 자동으로 된다.
작은 크기 타입에다가 큰 크기 타입을 집어넣으려면 큰 크기 타입 앞에 괄호를 씌우고 작은 크기 타입을 넣는다.
float타입은 값을 넣을 때 값 뒤에 f를 붙여서 명시해준다.

=====================================
System.arraycopy(Objest src, int srcPos, Object dest, int destPos, int length)
src: 원본 배열, srcPos: 복사할 항목의 시작 인덱스, dest: 새 배열, destPos: 붙여넣을 시작 인덱스, length: 복사할 개수

배열 복사
- 참조 타입 배열일 경우, 배열 복사가 되면 복사되는 값이 객체의 번지이므로 새 배열의 항목은 이전 배열의 항목이 참조하는
객체와 동일하다. 이것을 얕은 복사(shallow copy)라고 한다.
- 깊은 복사(deep copy)는 참조하는 객체도 별도로 생성하는 거것을 말한다.

향상된 for문
- 반복 실행을 하기 위해 카운터 변수와 증감식을 사용하지 않는다.
- 배열 및 컬렉션 항목의 개수만큼 반복하고, 자동적으로 for문을 빠져나간다.
- 형식
for(타입 변수 : 배열) {
  실행문;
}

열거 타입 선언
- 열거 타입(enumeration constant): 한정된 값만을 갖는 데이터 타입
- 열거 타입을 선언하기 위해서는 먼저 열거 타입 이름으로 소스 파일(.java)을 생성하야 한다.

열거 타입 변수
- 열거 타입 변수는 열거 상수를 저장할 수 있다.
- 열거 상수는 단독으로 사용할 수 없고, 반드시 열거타입.열거상수로 사용된다.
  ex) 열거타입 변수 = 열거타입.열거상수;
       Week today = Week.SUNDAY;
- 열거 상수는 객체이다.

java.lang.Enum클래스
String name() 열거 객체의 문자열을 리턴
int ordinal() 열거 객체의 순번(0부터 시작)을 리턴
int compareTo() 열거 객체를 비교해서 순번 차이를 리턴
열거 타입 valueOf(String name) 주어진 문자열의 열거 객체를 리턴
열거 배열 values() 모든 열거 객체들을 배열로 리턴

===================================================

객체란
- 물리적으로 존재하거나 추상적으로 생각할 수 있는 것 중에서 자신의 속성을 가지고 있고, 다른 것과 식별 가능 것

- ex) 물리적: 자동차, 자전거, 책, 사람
- ex) 추상적: 학과, 강의, 교과

객체는 속성과 동작으로 구성
- 구성 <-> 필드(field)
- ex) 이름, 나이

- 동작 <-> 메소드(method)
- ex) 달린다, 멈춘다

객체 모델링(Object Modeling)
- 현실 세계의 객체를 소프트웨어 객체로 설계하는 것
- 객체 모델링은 현실 세계 객체의 속성과 작을 추려내어 소프트웨어 객체의 필드와 메소드로 정의하는 과정

객체의 상호작용
- 객체들 사이의 상호작용(데이터를 주고 받는) 수단은 메소드

객체 간의 관계
객체는 개별적으로 사용될 수 있지만, 대부분 다른 객체와 관계를 맺고 있다.
- 집합 관계에 있는 객체는 하나의 부품이고 하나는 완성품
ex) 부품(엔진, 타이어) <- 집합관계 -> 완성품(자동차)
- 사용 관계는 객체 간의 상호작용을 말한다.
(객체는 다른 객체의 메소드를 호출하여 원하는 결과를 얻어낸다.)
ex) 사람 -> 사용관계 -> 사용자
- 상속 관계는 상위(부모)객체를 기반으로 하위(자식)객체를 생성하는 관계를 말한다.
ex) 기계 <- 상속관계 -> 자동차

1. 캡슐화(Encapsulation)
- 실제 구현 내용을 감추는 것
- 외부 객체는 객체내부의 구조를 알지 못하며 객체가 노출해서 제공하는 필드와 메소드만 이용
- 필드와 메소드를 캡슐화하여 보호하는 이유: 외부의 잘못된 사용으로 인해 객체가 손상되지 않도록 하는데 있다.
- 노출시킬 것인지, 숨길 것인지 -> 접근 제한자(Access Modifier) 사용

2. 상속 (Inheritance)
- 상위 객체를 재사용해서 하위 객체를 쉽고 빨리 설계 (반복된 코드의 중복을 줄여준다)
- 상속은 상위 객체의 수정으로 모든 하위 객체들의 수정 효과를 가져오므로 유지보수 시간을 최소화 시켜주기도 한다.

3. 다형성
- 같은 타입이지만 실행 결과가 다양한 객체를 이용할 수 있는 성질 
(하나의 타입에 여러 객체를 대입함으로써 다양한 기능을 이용할 수 있도록 해준다.)
- 자바는 다형성을 위해 부모 클래스 또는 인터페이스의 타입 변환을 허용한다.
(부모타입에는 모든 자식 객체가 대입될 수 있고, 인터페이스 타입에는 모든 구현 객체가 대입될 수 있다.)
- 다형성의 효과로 객체는 부품화가 가능하다.
ex) 타이어 인터페이스 타입 적용 -> 이 인터페이스를 구현한 실제 타이어들은 어떤 것이든 상관없이 장착(대입) 가
	



