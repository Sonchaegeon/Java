인터페이스 vs 추상 클래스
* 공통점
- 둘 다 모두 추상 메소드라는 것을 가진다.
- 둘 다 객체 생성은 불가능하고, 타입으로만 사용된다.
- 추상 클래스와 인터페이스 둘 다 객체의 생성이 목적인 클래스가 아니라, 변수나, 파라미터, 리턴 타입, 자료구조를 유연하게 쓰기 위한 도구

* 차이점
- 인터페이스는 스펙이나 원하는 기능을 정의하고자 쓰지만, 추상 클래스는 '상속, 약간의 강제성이 목적'이다.
- 인터페이스는 상수, 추상 메소드만 존재하지만, 추상 클래스는 상속이 원래 목적이므로 실제 변수나 메소드를 그대로 가지고 있다.
- 인터페이스는 다중 상속도 가능하지만, 추상 클래스는 단일 상속만 된다.

중첩 클래스와 중첩 인터페이스란?
- 클래스가 여러 클래스와 관계를 맺는 경우 -> 독립적으로 선언하는 것이 좋으나,
- 특정 클래스와 관계를 맺을 경우 -> 관계 클래스를 클래스 내부에 선언하는 것이 좋다.
- 중첩 클래스(Nested class)란 클래스 내부에 선언한 클래스를 말한다.

- 중첩클래스 사용시 장점
1. 두 클래스의 멤버들을 서로 쉽게 접근할 수 있다.
2. 외부에는 불필요한 관계 클래스를 감춤으로써 코드의 복잡함을 줄일 수 있다.

중첩 클래스
- 멤버 클래스도 하나의 클래스이기 때문에 컴파일하면 바이트 코드(class)이 별도로 생성한다.
A $ B .class (A: 바깥 클래스, B: 멤버 클래스)

정적 멤버 클래스
- A 클래스 외부에서 정적 멤버 클래스 c의 객체를 생성하려면 A 객체를 생성할 필요가 없고 다음과 같이 C 객체를 생성하면 된다.

중첩 클래스의 접근 제한
- 로컬 클래스에서 사용 제한
- 로컬 클래스 내부에서는 바깥 클래스의 필드나 메소드를 제한 없이 사용 가능
but, 문제는 메소드의 매개 변수나 로컬 변수를 로컬 클래스에서 사용할 때이다.
- 로컬 클래스에서 사용 가능한 것은 final로 선언된 매개 변수와 로컬 변수이다.

중첩 클래스에서 바깥 클래스 참조 얻기
- 중첩 클래스에서 this 키워드를 사용하면 바깥 클래스의 객체 참조가 아니라, 중첩 클래스의 객체 참조가 된다.


